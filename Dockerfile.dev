# Stage 1: Build the development environment from a stable base
FROM debian:bullseye-slim as builder

ARG TARGETARCH

# Set environment variables
ENV JAVA_HOME=/opt/graalvm
ENV GRADLE_HOME=/opt/gradle
ENV UV_HOME=/opt/uv
ENV GRADLE_VERSION=8.7
ENV PATH="$JAVA_HOME/bin:$GRADLE_HOME/bin:$UV_HOME:$PATH"

# Install base dependencies
RUN apt-get update && apt-get install -y \
    curl \
    unzip \
    build-essential \
    libffi-dev \
    zlib1g-dev \
    && rm -rf /var/lib/apt/lists/*

# Install GraalVM CE for Java 17 from GitHub Releases
# Note: The architecture is hardcoded to aarch64 based on previous logs.
RUN curl -LsSf https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-22.3.1/graalvm-ce-java17-linux-${TARGETARCH}-22.3.1.tar.gz -o graalvm.tar.gz && \
    mkdir -p $JAVA_HOME && \
    tar -xzf graalvm.tar.gz -C $JAVA_HOME --strip-components=1 && \
    rm graalvm.tar.gz

# Install Python language into GraalVM
RUN gu install python

# Install Gradle
RUN curl -LsSf https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip -o gradle.zip && \
    unzip gradle.zip -d /opt && \
    mv /opt/gradle-${GRADLE_VERSION} $GRADLE_HOME && \
    rm gradle.zip

# Install uv
RUN curl -LsSf https://astral.sh/uv/install.sh | env UV_INSTALL_DIR=$UV_HOME sh

# Final image for the development environment
FROM debian:bullseye-slim

# Copy the built environment from the builder stage
COPY --from=builder /opt/graalvm /opt/graalvm
COPY --from=builder /opt/gradle /opt/gradle
COPY --from=builder /opt/uv /opt/uv

# Set environment variables for the final image
ENV JAVA_HOME=/opt/graalvm
ENV GRADLE_HOME=/opt/gradle
ENV UV_HOME=/opt/uv
ENV PATH="$JAVA_HOME/bin:$GRADLE_HOME/bin:$UV_HOME:$PATH"

# Set up the working directory
WORKDIR /app

# Install runtime dependencies
RUN apt-get update && apt-get install -y libffi-dev zlib1g libgl1 libfontconfig1 binutils fakeroot && rm -rf /var/lib/apt/lists/*

# Copy Python dependencies file
COPY requirements.txt .

# Install Python libraries using uv
RUN uv venv python_env && \
    uv pip install --keyring-provider=disabled --python python_env/bin/python -r requirements.txt

# Add the venv to the PATH
ENV PATH="/app/python_env/bin:$PATH"

# Expose ports
EXPOSE 8080 5005

# Keep the container running
CMD ["tail", "-f", "/dev/null"]